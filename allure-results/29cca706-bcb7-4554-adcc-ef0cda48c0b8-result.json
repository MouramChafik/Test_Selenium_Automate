{"name": "test_delete_product", "status": "failed", "statusDetails": {"message": "AssertionError: Product 'Test Product Updated' should be removed from list\nassert 'Test Product Updated' not in ['Test Product Updated', 'Bug', 'tester', 'Bugger', 'dev # test', 'Floral Maxi Dress']", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"cec8f135180539492c300905b5c57d97\")>\n\n    def test_delete_product(driver):\n        \"\"\"Test deleting a product\"\"\"\n        # Login first\n        login(driver)\n        print(\"\\nCurrent URL:\", driver.current_url)\n    \n        # Verify admin navigation is present\n        admin_nav_container = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, ADMIN_NAV_CONTAINER))\n        )\n        assert admin_nav_container.is_displayed(), \"Admin nav container should be visible\"\n        print(\"Found admin nav container\")\n    \n        # Click on Products link (by text)\n        products_links = admin_nav_container.find_elements(By.CSS_SELECTOR, PRODUCTS_LINK)\n        products_link = None\n        for link in products_links:\n            if \"Products\" in link.text:\n                products_link = link\n                break\n        assert products_link is not None, \"Products link not found in admin nav\"\n        products_link.click()\n        print(\"Clicked on Products link\")\n    \n        # Wait for products page to load\n        WebDriverWait(driver, 10).until(\n            EC.url_to_be(PRODUCTS_URL)\n        )\n        print(\"Navigated to products page\")\n    \n        # Find products table\n        products_table = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, PRODUCTS_TABLE))\n        )\n        assert products_table.is_displayed(), \"Products table should be visible\"\n        print(\"Found products table\")\n    \n        # Find and select a product to delete\n        product_links = driver.find_elements(By.CSS_SELECTOR, PRODUCT_NAME_LINK)\n        target_product = None\n        target_checkbox_span = None\n        target_product_name = None  # Store the name of the product we're deleting\n    \n        for link in product_links:\n            if \"Test Product\" in link.text:\n                target_product = link\n                target_product_name = link.text  # Store the exact name\n                # Find the checkbox span in the same row\n                row = link.find_element(By.XPATH, \"./ancestor::tr\")\n                target_checkbox_span = row.find_element(By.CSS_SELECTOR, \"span.checkbox-unchecked\")\n                break\n    \n        assert target_product is not None, \"Test Product not found\"\n        assert target_checkbox_span is not None, \"Product checkbox span not found\"\n        print(f\"Found product to delete: {target_product_name}\")\n    \n        # Wait for checkbox span to be clickable and click it\n        WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"span.checkbox-unchecked\"))\n        )\n        target_checkbox_span.click()\n        print(\"Clicked product checkbox span\")\n    \n        # Verify selection count\n        selected_count = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, PRODUCT_SELECTED_COUNT))\n        )\n        assert \"1\" in selected_count.text, f\"Should show 1 product selected, got: {selected_count.text}\"\n        print(\"Verified selection count\")\n    \n        # Click delete button\n        delete_button = WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, PRODUCT_DELETE_BUTTON))\n        )\n        delete_button.click()\n        print(\"Clicked delete button\")\n    \n        # Verify delete confirmation dialog\n        modal_overlay = WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located((By.CSS_SELECTOR, \"div.modal-overlay.fadeIn\"))\n        )\n        assert modal_overlay.is_displayed(), \"Modal overlay should be visible\"\n        print(\"Found delete confirmation modal\")\n    \n        # Confirm deletion\n        confirm_button = WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"button.button.critical\"))\n        )\n        confirm_button.click()\n        print(\"Confirmed deletion\")\n    \n        # Wait 4 seconds after confirmation\n        print(\"Waiting 4 seconds after confirmation...\")\n        time.sleep(4)\n    \n        # Refresh the page\n        print(\"Refreshing page...\")\n        driver.refresh()\n    \n        # Wait for the table to be present after refresh\n        WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, PRODUCTS_TABLE))\n        )\n        print(\"Page refreshed, checking product list...\")\n    \n        # Check if the specific product is removed\n        product_links = driver.find_elements(By.CSS_SELECTOR, PRODUCT_NAME_LINK)\n        product_names = [link.text for link in product_links]\n        print(f\"Current products in list: {product_names}\")\n    \n>       assert target_product_name not in product_names, f\"Product '{target_product_name}' should be removed from list\"\nE       AssertionError: Product 'Test Product Updated' should be removed from list\nE       assert 'Test Product Updated' not in ['Test Product Updated', 'Bug', 'tester', 'Bugger', 'dev # test', 'Floral Maxi Dress']\n\ntests/test_test_delete_product.py:171: AssertionError"}, "description": "Test deleting a product", "attachments": [{"name": "stdout", "source": "94a80b02-3438-46e6-9a80-1f21e13cd691-attachment.txt", "type": "text/plain"}], "start": 1749848251146, "stop": 1749848261896, "uuid": "8c0b21aa-d10f-4fd0-9e9d-53747d9db854", "historyId": "ae8fec5f3fb13a020694ebfbe16e9f07", "testCaseId": "ae8fec5f3fb13a020694ebfbe16e9f07", "fullName": "tests.test_test_delete_product#test_delete_product", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_test_delete_product"}, {"name": "host", "value": "MBP-de-chafik.lan"}, {"name": "thread", "value": "46496-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_test_delete_product"}]}