{"name": "test_delete_product", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"button critical\">...</button> is not clickable at point (912, 537). Other element would receive the click: <div class=\"modal-overlay fadeIn\">...</div>\n  (Session info: chrome=137.0.7151.104)\nStacktrace:\n0   chromedriver                        0x0000000109c6b7a8 chromedriver + 5892008\n1   chromedriver                        0x0000000109c62efa chromedriver + 5857018\n2   chromedriver                        0x0000000109733400 chromedriver + 418816\n3   chromedriver                        0x000000010978c0b0 chromedriver + 782512\n4   chromedriver                        0x0000000109789f0b chromedriver + 773899\n5   chromedriver                        0x00000001097875a2 chromedriver + 763298\n6   chromedriver                        0x0000000109786cc0 chromedriver + 761024\n7   chromedriver                        0x000000010977934d chromedriver + 705357\n8   chromedriver                        0x00000001097ab4e2 chromedriver + 910562\n9   chromedriver                        0x0000000109778cc8 chromedriver + 703688\n10  chromedriver                        0x00000001097ab69e chromedriver + 911006\n11  chromedriver                        0x00000001097d3073 chromedriver + 1073267\n12  chromedriver                        0x00000001097ab2b3 chromedriver + 910003\n13  chromedriver                        0x0000000109777507 chromedriver + 697607\n14  chromedriver                        0x0000000109778171 chromedriver + 700785\n15  chromedriver                        0x0000000109c29550 chromedriver + 5621072\n16  chromedriver                        0x0000000109c2d4df chromedriver + 5637343\n17  chromedriver                        0x0000000109c04962 chromedriver + 5470562\n18  chromedriver                        0x0000000109c2de4f chromedriver + 5639759\n19  chromedriver                        0x0000000109bf3124 chromedriver + 5398820\n20  chromedriver                        0x0000000109c50708 chromedriver + 5781256\n21  chromedriver                        0x0000000109c508d0 chromedriver + 5781712\n22  chromedriver                        0x0000000109c62ac1 chromedriver + 5855937\n23  libsystem_pthread.dylib             0x00007ff807f931d3 _pthread_start + 125\n24  libsystem_pthread.dylib             0x00007ff807f8ebd3 thread_start + 15", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"65d0304f3ea6d511f632a63afcb8fbd0\")>\n\n    def test_delete_product(driver):\n        \"\"\"Test deleting a product\"\"\"\n        # Login first\n        login(driver)\n        print(\"\\nCurrent URL:\", driver.current_url)\n    \n        # Verify admin navigation is present\n        admin_nav_container = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, ADMIN_NAV_CONTAINER))\n        )\n        assert admin_nav_container.is_displayed(), \"Admin nav container should be visible\"\n        print(\"Found admin nav container\")\n    \n        # Click on Products link (by text)\n        products_links = admin_nav_container.find_elements(By.CSS_SELECTOR, PRODUCTS_LINK)\n        products_link = None\n        for link in products_links:\n            if \"Products\" in link.text:\n                products_link = link\n                break\n        assert products_link is not None, \"Products link not found in admin nav\"\n        products_link.click()\n        print(\"Clicked on Products link\")\n    \n        # Wait for products page to load\n        WebDriverWait(driver, 10).until(\n            EC.url_to_be(PRODUCTS_URL)\n        )\n        print(\"Navigated to products page\")\n    \n        # Find products table\n        products_table = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, PRODUCTS_TABLE))\n        )\n        assert products_table.is_displayed(), \"Products table should be visible\"\n        print(\"Found products table\")\n    \n        # Find and select a product to delete\n        product_links = driver.find_elements(By.CSS_SELECTOR, PRODUCT_NAME_LINK)\n        target_product = None\n        target_checkbox_span = None\n        target_product_name = None  # Store the name of the product we're deleting\n    \n        for link in product_links:\n            if \"Test Product\" in link.text:\n                target_product = link\n                target_product_name = link.text  # Store the exact name\n                # Find the checkbox span in the same row\n                row = link.find_element(By.XPATH, \"./ancestor::tr\")\n                target_checkbox_span = row.find_element(By.CSS_SELECTOR, \"span.checkbox-unchecked\")\n                break\n    \n        assert target_product is not None, \"Test Product not found\"\n        assert target_checkbox_span is not None, \"Product checkbox span not found\"\n        print(f\"Found product to delete: {target_product_name}\")\n    \n        # Wait for checkbox span to be clickable and click it\n        WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"span.checkbox-unchecked\"))\n        )\n        target_checkbox_span.click()\n        print(\"Clicked product checkbox span\")\n    \n        # Verify selection count\n        selected_count = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, PRODUCT_SELECTED_COUNT))\n        )\n        assert \"1\" in selected_count.text, f\"Should show 1 product selected, got: {selected_count.text}\"\n        print(\"Verified selection count\")\n    \n        # Click delete button\n        delete_button = WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, PRODUCT_DELETE_BUTTON))\n        )\n        delete_button.click()\n        print(\"Clicked delete button\")\n    \n        # Verify delete confirmation dialog\n        modal_overlay = WebDriverWait(driver, 10).until(\n            EC.visibility_of_element_located((By.CSS_SELECTOR, \"div.modal-overlay.fadeIn\"))\n        )\n        assert modal_overlay.is_displayed(), \"Modal overlay should be visible\"\n        print(\"Found delete confirmation modal\")\n    \n        # Confirm deletion\n        confirm_button = WebDriverWait(driver, 10).until(\n            EC.element_to_be_clickable((By.CSS_SELECTOR, \"button.button.critical\"))\n        )\n>       confirm_button.click()\n\ntests/test_test_delete_product.py:149: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:121: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:574: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:447: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x104fcc150>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff807f931d3 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff807f8ebd3 thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"button critical\">...</button> is not clickable at point (912, 537). Other element would receive the click: <div class=\"modal-overlay fadeIn\">...</div>\nE         (Session info: chrome=137.0.7151.104)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000109c6b7a8 chromedriver + 5892008\nE       1   chromedriver                        0x0000000109c62efa chromedriver + 5857018\nE       2   chromedriver                        0x0000000109733400 chromedriver + 418816\nE       3   chromedriver                        0x000000010978c0b0 chromedriver + 782512\nE       4   chromedriver                        0x0000000109789f0b chromedriver + 773899\nE       5   chromedriver                        0x00000001097875a2 chromedriver + 763298\nE       6   chromedriver                        0x0000000109786cc0 chromedriver + 761024\nE       7   chromedriver                        0x000000010977934d chromedriver + 705357\nE       8   chromedriver                        0x00000001097ab4e2 chromedriver + 910562\nE       9   chromedriver                        0x0000000109778cc8 chromedriver + 703688\nE       10  chromedriver                        0x00000001097ab69e chromedriver + 911006\nE       11  chromedriver                        0x00000001097d3073 chromedriver + 1073267\nE       12  chromedriver                        0x00000001097ab2b3 chromedriver + 910003\nE       13  chromedriver                        0x0000000109777507 chromedriver + 697607\nE       14  chromedriver                        0x0000000109778171 chromedriver + 700785\nE       15  chromedriver                        0x0000000109c29550 chromedriver + 5621072\nE       16  chromedriver                        0x0000000109c2d4df chromedriver + 5637343\nE       17  chromedriver                        0x0000000109c04962 chromedriver + 5470562\nE       18  chromedriver                        0x0000000109c2de4f chromedriver + 5639759\nE       19  chromedriver                        0x0000000109bf3124 chromedriver + 5398820\nE       20  chromedriver                        0x0000000109c50708 chromedriver + 5781256\nE       21  chromedriver                        0x0000000109c508d0 chromedriver + 5781712\nE       22  chromedriver                        0x0000000109c62ac1 chromedriver + 5855937\nE       23  libsystem_pthread.dylib             0x00007ff807f931d3 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff807f8ebd3 thread_start + 15\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException"}, "description": "Test deleting a product", "attachments": [{"name": "stdout", "source": "52f0b4ac-f146-4a34-bf6a-f64d7aa2e5d0-attachment.txt", "type": "text/plain"}], "start": 1749846653513, "stop": 1749846661265, "uuid": "1d066cb2-2087-4e69-8a5b-bb78fd565d62", "historyId": "ae8fec5f3fb13a020694ebfbe16e9f07", "testCaseId": "ae8fec5f3fb13a020694ebfbe16e9f07", "fullName": "tests.test_test_delete_product#test_delete_product", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_test_delete_product"}, {"name": "host", "value": "MBP-de-chafik.lan"}, {"name": "thread", "value": "40823-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_test_delete_product"}]}